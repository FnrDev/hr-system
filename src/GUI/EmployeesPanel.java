/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import Logic.PanelCellEditor;
import GUI.AddEmployeeDialog;
import Logic.Department;
import Logic.Department;
import Logic.Employee;
import Logic.Employee;
import Logic.HR_System;
import Logic.HR_System;
import Logic.SystemManager;
import Logic.SystemManager;
import java.awt.*;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author pvppl
 */
public class EmployeesPanel extends javax.swing.JPanel {
    private HR_System system;
    private JTable employeeTable;
    private DefaultTableModel tableModel;
    private JScrollPane tableScrollPane;

    /**
     * Creates new form EmployeesPanel
     */
    public EmployeesPanel() {
        this.system = SystemManager.getInstance().getSystem();
    
        // Initialize the table and model
        employeeTable = new JTable();
        tableModel = new DefaultTableModel(
            new Object[][] {},
            new String[] {"Name", "Position", "Department", "Gender", "PayLevel", "Actions"}
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 5; // Only make the Actions column editable
            }
        };
        employeeTable.setModel(tableModel);
        tableScrollPane = new JScrollPane(employeeTable);

        initComponents();

        // IMPORTANT: Replace the entire content of jPanel1 with a simple layout
        jPanel1.removeAll();
        jPanel1.setLayout(new BorderLayout());

        // Add a header panel at the top
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.add(employeeTitle, BorderLayout.NORTH);
        headerPanel.add(jLabel1, BorderLayout.CENTER);
        jPanel1.add(headerPanel, BorderLayout.NORTH);

        // Add the table scroll pane to the center
        jPanel1.add(tableScrollPane, BorderLayout.CENTER);

        // Set up the table and populate it
        setupEmployeeTable();
        populateEmployeeTable();

        // Force the UI to update
        jPanel1.revalidate();
        jPanel1.repaint();
    }
    
    AddEmployeeDialog dialog = new AddEmployeeDialog(null, true);

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        employeesSearch = new javax.swing.JTextField();
        btnAddEmployee = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        employeeTitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        employeeTitle1 = new javax.swing.JLabel();

        employeesSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeesSearchActionPerformed(evt);
            }
        });

        btnAddEmployee.setBackground(new java.awt.Color(67, 97, 238));
        btnAddEmployee.setForeground(new java.awt.Color(255, 255, 255));
        btnAddEmployee.setText("Add Employee");
        btnAddEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEmployeeActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(238, 238, 238));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        employeeTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        employeeTitle.setForeground(new java.awt.Color(67, 97, 238));
        employeeTitle.setText("Employee List");

        jLabel1.setForeground(new java.awt.Color(153, 153, 153));
        jLabel1.setText("Manage your employees and their department assignments.");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1168, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel2.setText("Name");

        jLabel3.setText("Position");

        jLabel4.setText("Department");

        jLabel5.setText("Gender");

        jLabel6.setText("PayLevel");

        jLabel7.setText("Actions");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(employeeTitle))
                        .addContainerGap(14, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(132, 132, 132)
                        .addComponent(jLabel3)
                        .addGap(140, 140, 140)
                        .addComponent(jLabel4)
                        .addGap(155, 155, 155)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(172, 172, 172)
                        .addComponent(jLabel7)
                        .addGap(157, 157, 157))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(employeeTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(235, Short.MAX_VALUE))
        );

        employeeTitle1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        employeeTitle1.setText("HR Department System");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(employeeTitle1)
                .addGap(884, 884, 884)
                .addComponent(btnAddEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeesSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeTitle1)
                    .addComponent(btnAddEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(employeesSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        getAccessibleContext().setAccessibleName("employeesPanel");
        getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    private void employeesSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeesSearchActionPerformed
        String searchText = employeesSearch.getText().toLowerCase().trim();
        if (searchText.isEmpty()) {
            populateEmployeeTable(); // Show all employees if search is empty
        } else {
            filterEmployeeTable(searchText);
        }
    }//GEN-LAST:event_employeesSearchActionPerformed

    private void btnAddEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEmployeeActionPerformed
       // Create a new dialog instance each time to ensure fresh state
        AddEmployeeDialog dialog = new AddEmployeeDialog(null, true);

        // Show the dialog and wait for it to close
        dialog.setVisible(true);

        // After dialog closes, refresh the table
        populateEmployeeTable();

        // Debug output
        System.out.println("Table refreshed. Employee count: " + system.listEmployees().size());
    }//GEN-LAST:event_btnAddEmployeeActionPerformed

    
    // New methods for table functionality
    private void setupEmployeeTable() {
        // Set up the table model with column names
        employeeTable.setVisible(true);
        tableScrollPane.setVisible(true);

        // Set preferred size for the table scroll pane to make it wider
        tableScrollPane.setPreferredSize(new Dimension(1100, 400));

        // Set custom renderer for the Actions column
        employeeTable.getColumnModel().getColumn(5).setCellRenderer(new TableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, 
                    boolean isSelected, boolean hasFocus, int row, int column) {
                if (value instanceof JPanel) {
                    JPanel panel = (JPanel) value;
                    if (isSelected) {
                        panel.setBackground(table.getSelectionBackground());
                    } else {
                        panel.setBackground(table.getBackground());
                    }
                    return panel;
                }
                return new JPanel();
            }
        });

        // Set custom editor for the Actions column
        employeeTable.getColumnModel().getColumn(5).setCellEditor(new PanelCellEditor());

        // Set column widths - increase the Actions column width
        employeeTable.getColumnModel().getColumn(0).setPreferredWidth(150); // Name
        employeeTable.getColumnModel().getColumn(1).setPreferredWidth(150); // Position
        employeeTable.getColumnModel().getColumn(2).setPreferredWidth(150); // Department
        employeeTable.getColumnModel().getColumn(3).setPreferredWidth(80);  // Gender
        employeeTable.getColumnModel().getColumn(4).setPreferredWidth(100); // PayLevel
        employeeTable.getColumnModel().getColumn(5).setPreferredWidth(200); // Actions

        // Prevent column resizing by the user to maintain our custom widths
        employeeTable.getTableHeader().setResizingAllowed(false);

        // Set row height to accommodate buttons - increase if needed
        employeeTable.setRowHeight(40);

        // Force the table to repaint
        employeeTable.revalidate();
        employeeTable.repaint();
    }

    
    private void populateEmployeeTable() {
        debugSystemData();
       // Clear existing rows
        tableModel.setRowCount(0);

        // Get employees from the system
        ArrayList<Employee> employees = system.listEmployees();

        System.out.println("Populating table with " + employees.size() + " employees");

        // Add each employee to the table
        for (Employee emp : employees) {
            System.out.println("Adding to table: " + emp.getFirstName() + " " + emp.getLastName());
            addEmployeeToTable(emp);
        }

        System.out.println("Table now has " + tableModel.getRowCount() + " rows");
        // Force UI refresh
        forceTableRefresh();
    }
    
    private void debugSystemData() {
        ArrayList<Employee> employees = system.listEmployees();
        System.out.println("DEBUG: System has " + employees.size() + " employees");
        for (Employee emp : employees) {
            System.out.println("DEBUG: Employee: " + emp.getEmployeeId() + " - " + 
                              emp.getFirstName() + " " + emp.getLastName());
        }
    }
    
    private void forceTableRefresh() {
        // Force the table to repaint
        tableModel.fireTableDataChanged();
        employeeTable.revalidate();
        employeeTable.repaint();

        // Force the container to repaint
        tableScrollPane.revalidate();
        tableScrollPane.repaint();
        jPanel1.revalidate();
        jPanel1.repaint();
        this.revalidate();
        this.repaint();
    }
    
    private void filterEmployeeTable(String searchText) {
        // Clear existing rows
        tableModel.setRowCount(0);
        
        // Get employees from the system
        ArrayList<Employee> employees = system.listEmployees();
        
        // Add matching employees to the table
        for (Employee emp : employees) {
            String fullName = emp.getFirstName() + " " + emp.getLastName();
            Department dept = emp.getDepartment();
            String deptName = (dept != null) ? dept.getName() : "";
            
            if (fullName.toLowerCase().contains(searchText) || 
                deptName.toLowerCase().contains(searchText)) {
                addEmployeeToTable(emp);
            }
        }
    }
    
    private void addEmployeeToTable(Employee emp) {
        if (emp == null) {
            System.out.println("Warning: Attempted to add null employee to table");
            return;
        }
        
        // Add this important fix to prevent buttons from disappearing
        employeeTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                // Force repaint when selection changes
                employeeTable.repaint();
            }
        });
        
        // Also add a mouse listener to handle clicks properly
        employeeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = employeeTable.rowAtPoint(evt.getPoint());
                int col = employeeTable.columnAtPoint(evt.getPoint());

                if (col == 5 && row >= 0) { // Actions column
                    // Get the component at that cell
                    TableCellRenderer renderer = employeeTable.getCellRenderer(row, col);
                    Component comp = employeeTable.prepareRenderer(renderer, row, col);

                    if (comp instanceof JPanel) {
                        JPanel panel = (JPanel) comp;
                        // Calculate relative click position within the cell
                        Rectangle cellRect = employeeTable.getCellRect(row, col, false);
                        int x = evt.getX() - cellRect.x;
                        int y = evt.getY() - cellRect.y;

                        // Forward the click to the panel
                        panel.dispatchEvent(new java.awt.event.MouseEvent(
                            panel, evt.getID(), evt.getWhen(), evt.getModifiers(),
                            x, y, evt.getClickCount(), evt.isPopupTrigger(), evt.getButton()
                        ));
                    }
                }
            }
        });
    
        // Get department name (if assigned)
        String departmentName = "Not Assigned";
        if (emp.getDepartment() != null) {
            departmentName = emp.getDepartment().getName();
        }

        // Get pay level as formatted string
        String payLevelStr = "Level " + emp.getPayLevel();

        // Create action buttons panel
        JPanel actionPanel = createActionButtons(emp);

        // Create row data
        Object[] row = {
            emp.getFirstName() + " " + emp.getLastName(),
            emp.getPosition(), // You may need to adjust this if you have position information
            departmentName,
            String.valueOf(emp.getGender()),
            payLevelStr,
            actionPanel
        };

        // Add row to table
        tableModel.addRow(row);

        System.out.println("Added row to table: " + emp.getFirstName() + " " + emp.getLastName());

        // Force the table to repaint
        employeeTable.revalidate();
        employeeTable.repaint();
    }
    
    private JPanel createActionButtons(Employee emp) {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0));
    
        // Edit button
        JButton editBtn = new JButton("Edit");
        editBtn.setPreferredSize(new Dimension(70, 30));
        editBtn.addActionListener(e -> editEmployee(emp));

        // Delete button
        JButton deleteBtn = new JButton("Delete");
        deleteBtn.setPreferredSize(new Dimension(70, 30));
        deleteBtn.addActionListener(e -> deleteEmployee(emp));

        panel.add(editBtn);
        panel.add(deleteBtn);

        // Make sure the panel itself has enough width
        panel.setPreferredSize(new Dimension(160, 35));

        return panel;
    }
    
    private void editEmployee(Employee emp) {
        // Open edit employee dialog with the selected employee
        // You'll need to create or modify your AddEmployeeDialog to accept an Employee for editing
        AddEmployeeDialog editDialog = new AddEmployeeDialog(null, true, emp);
        editDialog.setVisible(true);
        
        // Refresh the table after editing
        populateEmployeeTable();
    }
    
    private void deleteEmployee(Employee emp) {
        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to delete employee: " + emp.getFirstName() + " " + emp.getLastName() + "?",
            "Confirm Deletion",
            JOptionPane.YES_NO_OPTION
        );
        
        if (confirm == JOptionPane.YES_OPTION) {
            // Delete the employee
            system.deleteEmployee(emp.getEmployeeId());
            
            // Refresh the table
            populateEmployeeTable();
            
            JOptionPane.showMessageDialog(
                this,
                "Employee deleted successfully",
                "Success",
                JOptionPane.INFORMATION_MESSAGE
            );
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddEmployee;
    private javax.swing.JLabel employeeTitle;
    private javax.swing.JLabel employeeTitle1;
    private javax.swing.JTextField employeesSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
